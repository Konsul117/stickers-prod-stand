user  nginx;
# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# Each connection needs at least 2 file handles (even if you are proxying).
# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile  100000;


# provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections  4000;

    # optmized to serve many clients with each thread, essential for linux -- for testing environment
    use  epoll;

    # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
    multi_accept  on;
}


http {
	charset utf-8;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] $request_method "$scheme://$http_host$request_uri" '
                      '$server_protocol $status $bytes_sent $body_bytes_sent "$http_referer" "$http_user_agent" '
                      'reqtime="$request_time" upresptime="$upstream_response_time" upaddr="$upstream_addr" '
                      'upstatus="$upstream_status" redirect="$sent_http_location" '
                      'ips="$http_x_forwarded_for" reqlen="$request_length"';

    access_log  /var/log/nginx/access.log  main;

    types_hash_max_size  2048;

    # copies data between one FD and other from within the kernel
    # faster then read() + write()
    sendfile  on;
    sendfile_max_chunk  10M;

    # send headers in one peace, its better then sending them one by one
    tcp_nopush  on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay  on;

    # server will close connection after this time -- default 75
    keepalive_timeout  30;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests  100000;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection  on;

    # reduce the data that needs to be sent over network -- for testing environment
    gzip  on;
    gzip_http_version  1.0;
    gzip_min_length  256;
    gzip_comp_level  3;
    gzip_proxied  any;
    gzip_vary  off;
    gzip_types  text/plain
                text/css
                text/xml
                text/javascript
                application/javascript
                application/x-javascript
                application/json
                application/xml
                application/x-font-ttf
                image/svg+xml;
    gzip_disable  msie6;

    # Proxy buffers.
    # When buffering is enabled, nginx receives a response from the proxied server as soon as possible,
    # saving it into the buffers set by the proxy_buffer_size and proxy_buffers directives.
    # If the whole response does not fit into memory, a part of it can be saved to a temporary file on the disk.
    proxy_buffering  on;
    # The size of the buffer used for reading the first part of the response received from the proxied server.
    # This part usually contains a small response header.
    proxy_buffer_size  16K;
    # Sets the number and size of the buffers used for reading a response from the proxied server, for a single connection.
    proxy_buffers  1000 1M;
    # Limits the total size of buffers that can be busy sending a response to the client while the response is not yet fully read.
    # In the meantime, the rest of the buffers can be used for reading the response and, if needed,
    # buffering part of the response to a temporary file.
    proxy_busy_buffers_size  10M;
    # When buffering of responses from the proxied server is enabled, and the whole response does not fit into the buffers
    # set by the proxy_buffer_size and proxy_buffers directives, a part of the response can be saved to a temporary file.
    # The zero value disables buffering of responses to temporary files.
    proxy_max_temp_file_size  1024M;

    # cache informations about FDs, frequently accessed files
    open_file_cache  max=10000 inactive=30s;
    open_file_cache_valid  120s;
    open_file_cache_min_uses  2;
    open_file_cache_errors  on;

    include  /etc/nginx/conf.d/*.conf;

    # App config
    upstream app {
        server php:9000;
    }

    server {
        listen       80 default_server;
        server_name  localhost;

        root /releases/current_backend/web;

        location / {
            root /releases/current_frontend;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        location ~ \.(js|html|png|ico|jpg|jpeg|mp3) {
            root /releases/current_frontend;
        }

        location /api {
            root /releases/current_backend/web;
            index index.php;
            try_files $uri $uri/ /index.php$is_args$args;
        }

        error_page 500 502 503 504  /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        location ~* \.php$ {
            fastcgi_pass app;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
        }
    }
}
